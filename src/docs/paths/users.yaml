paths:
  /users:
    post:
      summary: Enregistrer un nouvel utilisateur
      description: Crée un nouvel utilisateur dans la base de données. Permet l'envoi d'un fichier avatar (profilePicture) via un champ de type fichier.
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: '+237612345678'
                email:
                  type: string
                  example: 'user@example.com'
                password:
                  type: string
                  example: 'Password123!'
                firstName:
                  type: string
                  example: 'John'
                lastName:
                  type: string
                  example: 'Doe'
                cityId:
                  type: integer
                  example: 1
                profilePicture:
                  type: string
                  format: binary
                  description: Fichier image à uploader comme avatar (jpeg, png, jpg, webp)
              required:
                - phoneNumber
                - password
                - firstName
                - lastName
                - cityId
      responses:
        '201':
          description: Utilisateur créé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Erreur de validation ou utilisateur déjà existant.
        '500':
          description: Erreur interne du serveur.

    get:
      summary: Récupérer tous les utilisateurs
      description: Retourne une liste de tous les utilisateurs disponibles dans la base de données.
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: role
          in: query
          description: Filtrer par rôle utilisateur
          schema:
            type: string
            enum: [USER, ADMIN, SUPER_ADMIN]
        - name: cityId
          in: query
          description: Filtrer par identifiant de ville
          schema:
            type: integer
        - name: email
          in: query
          description: Filtrer par email exact
          schema:
            type: string
            format: email
        - name: q
          in: query
          description: Recherche textuelle (nom, prénom ou email)
          schema:
            type: string
        - name: includeCity
          in: query
          description: Inclure les informations minimales de la ville
          schema:
            type: string
            enum: ['true', 'false']
            default: 'false'
        - name: sortBy
          in: query
          description: Champ de tri
          schema:
            type: string
            enum: [createdAt, lastName, firstName, role, cityId]
            default: createdAt
        - name: sortOrder
          in: query
          description: Ordre de tri
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Numéro de page (à partir de 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Nombre d'éléments par page (max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès, avec métadonnées de pagination.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      totalPages:
                        type: integer
                        example: 5
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '500':
          description: Erreur interne du serveur.

    put:
      summary: Mettre à jour le profil de l'utilisateur connecté
      description: Met à jour les informations de l'utilisateur actuellement connecté. Permet l'envoi d'un fichier avatar (profilePicture) via un champ de type fichier.
      tags:
        - Users
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'user@example.com'
                firstName:
                  type: string
                  example: 'John'
                lastName:
                  type: string
                  example: 'Doe'
                cityId:
                  type: integer
                  example: 1
                profilePicture:
                  type: string
                  format: binary
                  description: Fichier image à uploader comme avatar (jpeg, png, jpg, webp)
      responses:
        '200':
          description: Profil mis à jour avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

    delete:
      summary: Supprimer le profil de l'utilisateur connecté
      description: Supprime le compte de l'utilisateur actuellement connecté.
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Profil supprimé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile deleted
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '500':
          description: Erreur interne du serveur.

  /users/details:
    get:
      summary: Récupérer les détails du profil de l'utilisateur connecté
      description: Retourne les informations détaillées de l'utilisateur actuellement connecté.
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Détails du profil récupérés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '500':
          description: Erreur interne du serveur.

  /users/{id}:
    get:
      summary: Récupérer un utilisateur par ID
      description: Retourne les informations publiques d'un utilisateur spécifique en fonction de son ID.
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur.
      responses:
        '200':
          description: Utilisateur récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

    put:
      summary: Mise à jour d'un utilisateur par un administrateur
      description: Permet à un administrateur de mettre à jour les informations d'un utilisateur spécifique. Permet l'envoi d'un fichier avatar (profilePicture) via un champ de type fichier.
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [USER, ADMIN, SUPER_ADMIN]
                  example: ADMIN
                email:
                  type: string
                  example: 'admin@example.com'
                firstName:
                  type: string
                  example: 'Admin'
                lastName:
                  type: string
                  example: 'User'
                cityId:
                  type: integer
                  example: 1
                profilePicture:
                  type: string
                  format: binary
                  description: Fichier image à uploader comme avatar (jpeg, png, jpg, webp)
      responses:
        '200':
          description: Utilisateur mis à jour avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '403':
          description: Accès refusé. L'utilisateur doit être un administrateur.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

    delete:
      summary: Suppression d'un utilisateur par un administrateur
      description: Permet à un administrateur de supprimer un utilisateur spécifique.
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur.
      responses:
        '200':
          description: Utilisateur supprimé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '401':
          description: Non autorisé. L'utilisateur doit être connecté.
        '403':
          description: Accès refusé. L'utilisateur doit être un administrateur.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

  /users/request-restauration:
    post:
      summary: Demande de restauration de compte
      description: Permet à un utilisateur de demander un OTP pour restaurer un compte supprimé.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: '+237612345678'
              required:
                - phoneNumber
      responses:
        '200':
          description: OTP envoyé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent
                  otp:
                    $ref: '#/components/schemas/Otp'
        '400':
          description: Numéro de téléphone requis ou invalide.
        '404':
          description: Utilisateur non trouvé.
        '410':
          description: Compte non supprimé.
        '500':
          description: Erreur interne du serveur.

  /users/verify-restauration:
    post:
      summary: Vérification du code OTP pour la restauration de compte
      description: Permet à un utilisateur de vérifier un OTP pour restaurer un compte supprimé.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: '+237612345678'
                otpCode:
                  type: string
                  example: '123456'
              required:
                - phoneNumber
                - otpCode
      responses:
        '200':
          description: Compte restauré avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account restored
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Format OTP invalide.
        '404':
          description: OTP ou utilisateur non trouvé.
        '410':
          description: OTP expiré.
        '429':
          description: Tentatives maximales dépassées.
        '500':
          description: Erreur interne du serveur.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        phoneNumber:
          type: string
          example: '+237612345678'
        email:
          type: string
          example: 'user@example.com'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        profilePicture:
          type: string
          example: 'https://example.com/profile.jpg'
        cityId:
          type: integer
          example: 1
        role:
          type: string
          enum: [USER, ADMIN, SUPER_ADMIN]
          example: USER
        tokenRevokedBefore:
          type: string
          format: date-time
          example: '2025-05-04T12:34:56Z'
        createdAt:
          type: string
          format: date-time
          example: '2025-05-04T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-05-04T12:34:56Z'

securitySchemes:
  cookieAuth:
    type: apiKey
    in: cookie
    name: session
