paths:
  /prayer-session:
    post:
      tags:
        - Sessions
      summary: Start a new prayer session
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subjectId
              properties:
                subjectId:
                  type: integer
                  description: ID of the prayer subject
                cityId:
                  type: integer
                  description: ID of the city (optional if coordinates provided)
                latitude:
                  type: number
                  format: float
                  description: Latitude coordinate (optional if cityId provided)
                longitude:
                  type: number
                  format: float
                  description: Longitude coordinate (optional if cityId provided)
                description:
                  type: string
                  description: Session description
      responses:
        '201':
          description: Session started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session started"
                  data:
                    $ref: '#/components/schemas/PrayerSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'

    get:
      tags:
        - Sessions
      summary: Get sessions by prayer subject
      security:
        - cookieAuth: []
      parameters:
        - name: subjectId
          in: query
          required: true
          description: ID of the prayer subject
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [active, completed]
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sessions retrieved"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrayerSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /prayer-session/user/me:
    get:
      tags:
        - Sessions
      summary: Get current user's sessions
      security:
        - cookieAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [active, completed]
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sessions retrieved"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrayerSession'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /prayer-session/all:
    get:
      tags:
        - Sessions
      summary: Get all prayer sessions with filtering and sorting
      security:
        - cookieAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [active, completed]
        - name: cityId
          in: query
          description: Filter by specific city ID
          schema:
            type: integer
        - name: countryCode
          in: query
          description: Filter by country code (ISO 3166-1 alpha-2)
          schema:
            type: string
            example: "US"
        - name: countryName
          in: query
          description: Filter by country name
          schema:
            type: string
            example: "United States"
        - name: continent
          in: query
          description: Filter by continent code
          schema:
            type: string
            example: "NA"
        - name: continentName
          in: query
          description: Filter by continent name
          schema:
            type: string
            example: "North America"
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [createdAt, updatedAt, status, cityId]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sessions retrieved"
                  data:
                    type: object
                    properties:
                      sessions:
                        type: array
                        items:
                          $ref: '#/components/schemas/PrayerSession'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /prayer-session/{id}:
    get:
      tags:
        - Sessions
      summary: Get a specific prayer session by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: integer
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session retrieved"
                  data:
                    $ref: '#/components/schemas/PrayerSession'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - Sessions
      summary: Update a prayer session
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cityId:
                  type: integer
                  description: New city ID
                description:
                  type: string
                  description: New session description
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session updated"
                  data:
                    $ref: '#/components/schemas/PrayerSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Sessions
      summary: End a prayer session
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Session ID
          schema:
            type: integer
      responses:
        '204':
          description: Session ended successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    PrayerSession:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the session
        status:
          type: string
          enum: [active, completed]
          description: Current status of the prayer session
        latitude:
          type: number
          format: float
          description: Latitude coordinate of the session location
        longitude:
          type: number
          format: float
          description: Longitude coordinate of the session location
        accuracy:
          type: number
          format: float
          description: GPS accuracy in degrees
        description:
          type: string
          description: Session description
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Session last update timestamp
        subject:
          $ref: '#/components/schemas/PrayerSubject'
        user:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/City'

    PrayerSubject:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        state:
          type: string
          enum: [active, closed]
        description:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    City:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        countryCode:
          type: string
        countryName:
          type: string
        continent:
          type: string
        continentName:
          type: string

    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        totalPages:
          type: integer
          description: Total number of pages

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Validation error"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Authentication required"

    NotFound:
      description: Not found - resource doesn't exist
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"

    Conflict:
      description: Conflict - resource already exists or invalid state
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource conflict"
